{"0": {
    "doc": "Config specification",
    "title": "Config specification",
    "content": "# Config specification Here is a sample configuration yaml structure which sentinel expects. ```yaml name: anomaly description: Get anomalous calls data_url: s3://bucket/path/to/dataframe.csv export: slack: channel_name: \"app-testing\" email: ids: - user@example.com - user2@example.com filters: prediction_low_confidence: limit: 10 annotation_key: \"prediction_low_confidence\" kwargs: confidence_threshold: 0.50 low_asr_confidence: limit: 10 annotation_key: \"low_asr_confidence\" kwargs: confidence_threshold: 0.50 no_alternatives: limit: 10 annotation_key: \"no_alternatives\" call_end_state: limit: 10 annotation_key: \"call_end_state\" kwargs: end_state: [\"REPROMPT_INTENT\"] ``` ### General tool config spec - `name`: Name for this config, not used by sentinel. This is mostly for easy config management for the users. - `description`: Description about this config, not used by sentinel. This is mostly for easy config management for the users. - `data_url`: S3 path of the dataframe. - `export`: Report exporting methods. - `slack`: - `channel_name`: Slack channel name to post report in. - `email`: This feature is not yet supported. - `ids`: List of email ids to send reports to. ### Filter spec All the filters to use for sentinel runs are specified under this. - ``: Name of the filter you used while registering. For example: see how [`ASRConfidenceFilter`][asr-confidence] is registered. - `limit`: Number of items (calls/turns) you want to see in the final report satisfying this filter's constraints. - `annotation_key`: name of the column name to be added in the dataframe. Sentinel adds an annotation to the items which satisfy the constraints of the filter. This can be same as the `` mentioned above. - `kwargs`: Any keyword arguments you would want to pass to the filters. - ``: Value which the filters can use. Make sure that the filter functions (available or custom defined) make use of these keyword arguments. Check a sample filter which makes use of kwargs [here][asr-confidence]. [asr-confidence]: https://github.com/skit-ai/sentinel/blob/master/sentinel/filters/confidence.p ",
    "url": "/sentinel/config-spec.html",
    "relUrl": "/config-spec.html"
  },"1": {
    "doc": "Filters",
    "title": "Filters",
    "content": "# Filters This page explains what are filter functions and how to write your own filter functions. Filters are functions which: - Take a dataframe as input. - Check and apply certain constraints. and - Return back a smaller, subset of the original dataframe which holds true for the constraints applied by the filter. Calls/turns from these dataframes are reported as reports via Slack, e-mail etc. #### Example Consider a dataframe below: ``` call_uuid,conversation_uuid,alternatives,audio_url,reftime,prediction,state,call_duration,state_transitions 1,2,\"[[{\"\"confidence\"\": 0.9299549, \"\"transcript\"\": \"\"Hindi\"\"}, {\"\"confidence\"\": 0.04444444, \"\"transcript\"\": \"\"hinadi\"\"}, {\"\"confidence\"\": 0.48719966, \"\"transcript\"\": \"\"in Hindi\"\"}]]\",https://example.com/%2F2021-09-27%21%2Fc0f5b3ef-da72-4488-8191-b0412685fd3c.flac,2021-09-27 03:37:14.806623 +0000 UTC,\"{\"\"name\"\": \"\"inform_hindi\"\", \"\"score\"\": 0.9949743324486925, \"\"slot\"\": []}\",COF,,UPCOMING_FLIGHT_DETAILS_ASYNC -> GET_LANGUAGE_PREFERENCE -> COF -> COF -> SET_LANGUAGE_PREFERENCE -> COF_QUERY -> COF_QUERY -> COF_QUERY -> COF_QUERY -> CONFIRMATION_CANCELLATION_POLICY -> CONFIRMATION_CANCELLATION_POLICY -> CONFIRMATION_CANCELLATION_POLICY -> ACTION_FETCH_UPCOMING_FLIGHT_DETAILS -> BOOKING_DONE -> BOOKING_DONE -> COF_ALPHANUMERIC -> COF_ALPHANUMERIC -> COLLECT_INPUT -> COLLECT_INPUT -> COLLECT_INPUT -> COLLECT_INPUT -> COLLECT_INPUT -> ACTION_GROUP_4 -> GROUP_4_2 -> GROUP_4_2 -> ACTION_CONFIRM_GROUP_4 -> ACTION_GROUP_4 -> GROUP_4_2 -> GROUP_4_2 -> ACTION_CONFIRM_GROUP_4 -> FINAL_CONFIRM -> FINAL_CONFIRM -> FINAL_CONFIRM -> FINAL_CONFIRM -> TRANSFER_AGENT -> NA ``` If you apply an [`ASRConfidenceFilter`][asr-confidence] filter on this dataframe with a threshold of `0.95`, this will be marked as an anomalous call because of the low confidence in of the alternatives. --- ### Writing a custom filter Implement the [`FilterBase`][filter-base] class and register it via [`@FilterFactory.register`][register] decorator to add it to supported filter factory. For example, consider a filter to flag out calls with certain end state. ```python @FilterFactory.register(name=\"call_end_state\", description=\"Calls with a particular end state\") class EndStateFilter(FilterBase): def __init__(self, *args, **kwargs): self.end_state = kwargs.get(\"end_state\", [\"COF\"]) super().__init__(*args, **kwargs) def preprocess(self, df: pd.DataFrame): raise NotImplementedError def process(self, df: pd.DataFrame) -> pd.DataFrame: filtered_df = self._filter_last_turn(df) filtered_df = self.annotate(filtered_df, filtered_df.state, self._filter_state, \"call_end_state\") return filtered_df def _filter_state(self, item: str): if item in self.end_state: return True def _filter_last_turn(self, df: pd.DataFrame) -> pd.DataFrame: filtered_df = df.groupby([\"call_uuid\", \"state\"], as_index=False).first() filtered_df = filtered_df.drop_duplicates(subset=[\"call_uuid\"], keep=\"last\") return filtered_df ``` Logic on how filtering is being performed for this particular example might be out of the scope of this doc but the basic steps taken are: 1. Create a new filter class inheriting the [`FilterBase`][filter-base] ABC and register it with the [`FilterFactory`](./) ```python @FilterFactory.register(name=\"call_end_state\", description=\"Calls with a particular end state\") class EndStateFilter(FilterBase): def __init__(self, *args, **kwargs): self.end_state = kwargs.get(\"end_state\", [\"COF\"]) super().__init__(*args, **kwargs) ... ``` Here, - `name` is the name of this filter which will be used to refer this filter in [`config.yml`][config-spec]. - `description` is the description of this filter which is mostly used while reporting calls over Slack or email. Any keyword arguments described in the `config.yml` (see how to provide keyword arguments in `config.yml` [here][config-spec]), must be initialzed and in `__init__()` like above 2. For serving dataframes, implement `process()` method to filter out a smaller dataframe which matches your filter constraints and return. ```python @FilterFactory.register(name=\"call_end_state\", description=\"Calls with a particular end state\") class EndStateFilter(FilterBase): ... def process(self, df: pd.DataFrame) -> pd.DataFrame: filtered_df = self._filter_last_turn(df) filtered_df = self.annotate(filtered_df, filtered_df.state, self._filter_state, \"call_end_state\") return filtered_df ... ``` 3. While reporting, sentinel will automatically pick up relevant calls/turns from the dataframe and report. You don't need to make changes in reporting logic. (You might have to make appropriate changes in the config file). ### Using your newly created filters Check the `config.yml` doc [here][config-spec] to see how to add your filter to be used by sentinel. [filter-base]: https://github.com/skit-ai/sentinel/blob/master/sentinel/filters/base.py#L7 [asr-confidence]: https://github.com/skit-ai/sentinel/blob/master/sentinel/filters/confidence.py [register]: https://github.com/skit-ai/sentinel/blob/master/sentinel/filters/base.py#L89 [config-spec]: ./config-spec.html ",
    "url": "/sentinel/filters.html",
    "relUrl": "/filters.html"
  },"2": {
    "doc": "Home",
    "title": "Sentinel",
    "content": ". ![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/skit-ai/sentinel?style=flat-square) [![CI](https://github.com/skit-ai/sentinel/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/skit-ai/sentinel/actions/workflows/test.yml) [![docs](https://github.com/skit-ai/sentinel/actions/workflows/docs.yml/badge.svg?branch=master)](https://github.com/skit-ai/sentinel/actions/workflows/docs.yml) [Sentinel][sentinel] is an anomalous call monitoring and filtering system which picks calls that are weird in some way or the other and push them to a daily report. It works on calls/turn data as defined in [dataframes](https://github.com/skit-ai/dataframes) that has standard datatype definitions. ## Installation ``` pip install https://github.com/skit-ai/sentinel/releases/download/0.2.6/sentinel-0.2.6-py3-none-any.whl ``` ## Usage ### Running sentinel To run sentinel against a dataframe, you need to first create a config file which has definition of the dataframe to use, filters to apply, reporting etc. More about config in the doc [here](./config-spec.html) ```bash sentinel run --config-yml=config.yml ``` Based on the config for exporting report, you'll get calls/turns in Slack or email. To get the available filter functions do: ### Filter list ```bash sentinel list ``` This will give a list of available filter names and their description like below: ``` Available filter functions: +---------------------------+------------------------------------------------+ | filters | description | +===========================+================================================+ | no_alternatives | Turns with no alternatives | +---------------------------+------------------------------------------------+ | filter_words | Turns with certain words | +---------------------------+------------------------------------------------+ | low_asr_confidence | Low ASR confidence turns | +---------------------------+------------------------------------------------+ | prediction_low_confidence | Low prediction confidence turns | +---------------------------+------------------------------------------------+ | call_end_state | Calls with a particular end state | +---------------------------+------------------------------------------------+ | state_stuck | Calls which are stuck in particular state | +---------------------------+------------------------------------------------+ | state_loop | Calls which come back to already visited state | +---------------------------+------------------------------------------------+ ``` ### Filter list with verbose description ```bash sentinel list --verbose ``` This will give a list of available filter names and their verbose description like below: ``` +---------------------------+--------------------------------------------------------------------------------------------------+ | filters | description | +===========================+==================================================================================================+ | no_alternatives | This filter reports turns with no alternatives. | | | In most of the cases, these are turns where users are unresponsive. | +---------------------------+--------------------------------------------------------------------------------------------------+ | filter_words | This filter can be used to flag out turns with certain words. | | | Use the below keyword arguments in the config to specify configurable attributes. | | kwargs: | | word_list (list): List of words to be flagged out. | +---------------------------+--------------------------------------------------------------------------------------------------+ | low_asr_confidence | This filter flags turns where best alternative from ASR has confidence lest than some threshold. | | | Use the below keyword arguments in the config to specify configurable | | attributes. | | kwargs: | | confidence_threshold (int): Confidence threshold. | +---------------------------+--------------------------------------------------------------------------------------------------+ | prediction_low_confidence | This filter flags turns with SLU prediction confidence less than some threshold. | | | Use the below keyword arguments in the config to specify configurable | | attributes. | | kwargs: | | confidence_threshold (float): Confidence threshold. | +---------------------------+--------------------------------------------------------------------------------------------------+ | call_end_state | This filter flags out calls with a particular end state. | | | | | Use the below keyword arguments in the config to specify configurable | | attributes. | | kwargs: | | end_state: list of strings of the end state(s) to filter out. | +---------------------------+--------------------------------------------------------------------------------------------------+ | state_stuck | This filter flags out calls which are stuck in a particular state. | | | Parameters: | | max_state_count: int, the maximum number of times a state can be repeated. | | | Current dataframe consist of user and bot turn hence for a call to be stuck | | at a state `SAMPLE_STATE` for 5 consecutive turns, the `max_state_count` | | value must be 5. | +---------------------------+--------------------------------------------------------------------------------------------------+ | state_loop | This filter flags out calls where the call comes back to an already visited state. | | | A user might be on a state for multiple turns but once they move to a | | different turn and again come back to the visited turn, this filter flags | | them. | +---------------------------+--------------------------------------------------------------------------------------------------+ ``` ## Reporting Currently, sentinel supports exporting results on Slack. ### Slack Below is a screenshot of exports on Slack. ![](assets/images/report-sc.png) ### Email ... [sentinel]: https://github.com/skit-ai/sentinel ",
    "url": "/sentinel/",
    "relUrl": "/"
  },"3": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/sentinel/",
    "relUrl": "/"
  },"4": {
    "doc": "Roadmap",
    "title": "Roadmap",
    "content": "# Roadmap ... ",
    "url": "/sentinel/roadmap.html",
    "relUrl": "/roadmap.html"
  }
}
